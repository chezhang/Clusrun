package main

import (
	"reflect"
	"testing"
)

func Test_parseSweep(t *testing.T) {
	cases := []struct {
		sweep               string
		count               int
		expectedPlaceholder string
		expectedSequence    []int
	}{
		{"*", 0, "*", []int{}},
		{"*", 1, "*", []int{0}},
		{"*", 10, "*", []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
		{"***", 10, "***", []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
		{"123", 10, "123", []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
		{"sweep@(debug)", 10, "sweep@(debug)", []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
		{"*{}", 11, "*{}", []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}},
		{"*{}{1}", 11, "*{}", []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}},
		{"{*}{1}", 11, "{*}", []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}},
		{"{}*{1}", 11, "{}*", []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}},
		{"*{0}", 11, "*", []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}},
		{"*{5}", 11, "*", []int{5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}},
		{"*{-5}", 11, "*", []int{-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5}},
		{"*{1-5}", 11, "*", []int{1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1}},
		{"*{-1-5}", 11, "*", []int{-1, 0, 1, 2, 3, 4, 5, -1, 0, 1, 2}},
		{"*{1--5}", 11, "*", []int{1, 0, -1, -2, -3, -4, -5, 1, 0, -1, -2}},
		{"*{-1--5}", 11, "*", []int{-1, -2, -3, -4, -5, -1, -2, -3, -4, -5, -1}},
		{"{}", 5, "{}", []int{0, 1, 2, 3, 4}},
		{"{:}", 5, "{:}", []int{0, 1, 2, 3, 4}},
		{"*{:}", 5, "*{:}", []int{0, 1, 2, 3, 4}},
		{"*{0:0}", 5, "*", []int{0, 0, 0, 0, 0}},
		{"*{0:-1}", 5, "*", []int{0, -1, -2, -3, -4}},
		{"*{0:-2}", 5, "*", []int{0, -2, -4, -6, -8}},
		{"*{-5:2}", 5, "*", []int{-5, -3, -1, 1, 3}},
		{"*{-5:-2}", 5, "*", []int{-5, -7, -9, -11, -13}},
		{"*{1-5:0}", 5, "*", []int{1, 1, 1, 1, 1}},
		{"*{1-1:2}", 5, "*", []int{1, 1, 1, 1, 1}},
		{"*{1-5:2}", 5, "*", []int{1, 3, 5, 1, 3}},
		{"*{1-5:-2}", 5, "*", []int{1, 1, 1, 1, 1}},
		{"*{5-1:-2}", 5, "*", []int{5, 3, 1, 5, 3}},
		{"*{5-1:0}", 5, "*", []int{5, 5, 5, 5, 5}},
		{"*{-5-1:2}", 5, "*", []int{-5, -3, -1, 1, -5}},
		{"*{-5-1:-2}", 5, "*", []int{-5, -5, -5, -5, -5}},
		{"*{5--1:-2}", 5, "*", []int{5, 3, 1, -1, 5}},
		{"*{-5--1:-2}", 5, "*", []int{-5, -5, -5, -5, -5}},
		{"*{-5--1:2}", 5, "*", []int{-5, -3, -1, -5, -3}},
		{"??{-5--1:2}", 5, "??", []int{-5, -3, -1, -5, -3}},
		{"??{-5--1:20}", 5, "??", []int{-5, -5, -5, -5, -5}},
		{"??{-5-+1:20}", 5, "??", []int{-5, -5, -5, -5, -5}},
		{"??{+5-+1:-2}", 5, "??", []int{5, 3, 1, 5, 3}},
		{"??{+5-+1:-2}{+5-+1:-2}", 5, "??{+5-+1:-2}", []int{5, 3, 1, 5, 3}},
	}

	for _, c := range cases {
		if p, s := parseSweep(c.sweep, c.count); p != c.expectedPlaceholder || !reflect.DeepEqual(s, c.expectedSequence) {
			t.Errorf("\nsweep=%v\ncount=%v\nexpected placeholder=%v\n  actual placeholder=%v\nexpected sequence=%v\n  actual sequence=%v",
				c.sweep, c.count, c.expectedPlaceholder, p, c.expectedSequence, s)
		}
	}
}
