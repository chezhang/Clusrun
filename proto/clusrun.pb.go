// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/clusrun.proto

package clusrun

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type HeartbeatRequest struct {
	Node                 string   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Host                 string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeartbeatRequest) Reset()         { *m = HeartbeatRequest{} }
func (m *HeartbeatRequest) String() string { return proto.CompactTextString(m) }
func (*HeartbeatRequest) ProtoMessage()    {}
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{1}
}

func (m *HeartbeatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeartbeatRequest.Unmarshal(m, b)
}
func (m *HeartbeatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeartbeatRequest.Marshal(b, m, deterministic)
}
func (m *HeartbeatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeartbeatRequest.Merge(m, src)
}
func (m *HeartbeatRequest) XXX_Size() int {
	return xxx_messageInfo_HeartbeatRequest.Size(m)
}
func (m *HeartbeatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HeartbeatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HeartbeatRequest proto.InternalMessageInfo

func (m *HeartbeatRequest) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *HeartbeatRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type StartJobRequest struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartJobRequest) Reset()         { *m = StartJobRequest{} }
func (m *StartJobRequest) String() string { return proto.CompactTextString(m) }
func (*StartJobRequest) ProtoMessage()    {}
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{2}
}

func (m *StartJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartJobRequest.Unmarshal(m, b)
}
func (m *StartJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartJobRequest.Marshal(b, m, deterministic)
}
func (m *StartJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartJobRequest.Merge(m, src)
}
func (m *StartJobRequest) XXX_Size() int {
	return xxx_messageInfo_StartJobRequest.Size(m)
}
func (m *StartJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartJobRequest proto.InternalMessageInfo

func (m *StartJobRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *StartJobRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CancelJobRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Force                bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelJobRequest) Reset()         { *m = CancelJobRequest{} }
func (m *CancelJobRequest) String() string { return proto.CompactTextString(m) }
func (*CancelJobRequest) ProtoMessage()    {}
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{3}
}

func (m *CancelJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelJobRequest.Unmarshal(m, b)
}
func (m *CancelJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelJobRequest.Marshal(b, m, deterministic)
}
func (m *CancelJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelJobRequest.Merge(m, src)
}
func (m *CancelJobRequest) XXX_Size() int {
	return xxx_messageInfo_CancelJobRequest.Size(m)
}
func (m *CancelJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelJobRequest proto.InternalMessageInfo

func (m *CancelJobRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CancelJobRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type ValidateRequest struct {
	Headnode             string   `protobuf:"bytes,1,opt,name=headnode,proto3" json:"headnode,omitempty"`
	Clusnode             string   `protobuf:"bytes,2,opt,name=clusnode,proto3" json:"clusnode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateRequest) Reset()         { *m = ValidateRequest{} }
func (m *ValidateRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateRequest) ProtoMessage()    {}
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{4}
}

func (m *ValidateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateRequest.Unmarshal(m, b)
}
func (m *ValidateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateRequest.Marshal(b, m, deterministic)
}
func (m *ValidateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateRequest.Merge(m, src)
}
func (m *ValidateRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateRequest.Size(m)
}
func (m *ValidateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateRequest proto.InternalMessageInfo

func (m *ValidateRequest) GetHeadnode() string {
	if m != nil {
		return m.Headnode
	}
	return ""
}

func (m *ValidateRequest) GetClusnode() string {
	if m != nil {
		return m.Clusnode
	}
	return ""
}

type ValidateReply struct {
	Nodename             string   `protobuf:"bytes,1,opt,name=nodename,proto3" json:"nodename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateReply) Reset()         { *m = ValidateReply{} }
func (m *ValidateReply) String() string { return proto.CompactTextString(m) }
func (*ValidateReply) ProtoMessage()    {}
func (*ValidateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{5}
}

func (m *ValidateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateReply.Unmarshal(m, b)
}
func (m *ValidateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateReply.Marshal(b, m, deterministic)
}
func (m *ValidateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateReply.Merge(m, src)
}
func (m *ValidateReply) XXX_Size() int {
	return xxx_messageInfo_ValidateReply.Size(m)
}
func (m *ValidateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateReply.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateReply proto.InternalMessageInfo

func (m *ValidateReply) GetNodename() string {
	if m != nil {
		return m.Nodename
	}
	return ""
}

type GetNodesReply struct {
	ReadyNodes           []string `protobuf:"bytes,1,rep,name=ready_nodes,json=readyNodes,proto3" json:"ready_nodes,omitempty"`
	ErrorNodes           []string `protobuf:"bytes,2,rep,name=error_nodes,json=errorNodes,proto3" json:"error_nodes,omitempty"`
	LostNodes            []string `protobuf:"bytes,3,rep,name=lost_nodes,json=lostNodes,proto3" json:"lost_nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodesReply) Reset()         { *m = GetNodesReply{} }
func (m *GetNodesReply) String() string { return proto.CompactTextString(m) }
func (*GetNodesReply) ProtoMessage()    {}
func (*GetNodesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{6}
}

func (m *GetNodesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodesReply.Unmarshal(m, b)
}
func (m *GetNodesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodesReply.Marshal(b, m, deterministic)
}
func (m *GetNodesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodesReply.Merge(m, src)
}
func (m *GetNodesReply) XXX_Size() int {
	return xxx_messageInfo_GetNodesReply.Size(m)
}
func (m *GetNodesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodesReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodesReply proto.InternalMessageInfo

func (m *GetNodesReply) GetReadyNodes() []string {
	if m != nil {
		return m.ReadyNodes
	}
	return nil
}

func (m *GetNodesReply) GetErrorNodes() []string {
	if m != nil {
		return m.ErrorNodes
	}
	return nil
}

func (m *GetNodesReply) GetLostNodes() []string {
	if m != nil {
		return m.LostNodes
	}
	return nil
}

type SetHeadnodesRequest struct {
	Headnodes            []string `protobuf:"bytes,1,rep,name=headnodes,proto3" json:"headnodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetHeadnodesRequest) Reset()         { *m = SetHeadnodesRequest{} }
func (m *SetHeadnodesRequest) String() string { return proto.CompactTextString(m) }
func (*SetHeadnodesRequest) ProtoMessage()    {}
func (*SetHeadnodesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{7}
}

func (m *SetHeadnodesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetHeadnodesRequest.Unmarshal(m, b)
}
func (m *SetHeadnodesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetHeadnodesRequest.Marshal(b, m, deterministic)
}
func (m *SetHeadnodesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHeadnodesRequest.Merge(m, src)
}
func (m *SetHeadnodesRequest) XXX_Size() int {
	return xxx_messageInfo_SetHeadnodesRequest.Size(m)
}
func (m *SetHeadnodesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHeadnodesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetHeadnodesRequest proto.InternalMessageInfo

func (m *SetHeadnodesRequest) GetHeadnodes() []string {
	if m != nil {
		return m.Headnodes
	}
	return nil
}

type SetHeadnodesReply struct {
	Results              map[string]string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetHeadnodesReply) Reset()         { *m = SetHeadnodesReply{} }
func (m *SetHeadnodesReply) String() string { return proto.CompactTextString(m) }
func (*SetHeadnodesReply) ProtoMessage()    {}
func (*SetHeadnodesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{8}
}

func (m *SetHeadnodesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetHeadnodesReply.Unmarshal(m, b)
}
func (m *SetHeadnodesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetHeadnodesReply.Marshal(b, m, deterministic)
}
func (m *SetHeadnodesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetHeadnodesReply.Merge(m, src)
}
func (m *SetHeadnodesReply) XXX_Size() int {
	return xxx_messageInfo_SetHeadnodesReply.Size(m)
}
func (m *SetHeadnodesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetHeadnodesReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetHeadnodesReply proto.InternalMessageInfo

func (m *SetHeadnodesReply) GetResults() map[string]string {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetHeadnodesReply struct {
	Headnodes            map[string]bool `protobuf:"bytes,1,rep,name=headnodes,proto3" json:"headnodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetHeadnodesReply) Reset()         { *m = GetHeadnodesReply{} }
func (m *GetHeadnodesReply) String() string { return proto.CompactTextString(m) }
func (*GetHeadnodesReply) ProtoMessage()    {}
func (*GetHeadnodesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_681cbf33fad43e59, []int{9}
}

func (m *GetHeadnodesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetHeadnodesReply.Unmarshal(m, b)
}
func (m *GetHeadnodesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetHeadnodesReply.Marshal(b, m, deterministic)
}
func (m *GetHeadnodesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHeadnodesReply.Merge(m, src)
}
func (m *GetHeadnodesReply) XXX_Size() int {
	return xxx_messageInfo_GetHeadnodesReply.Size(m)
}
func (m *GetHeadnodesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHeadnodesReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetHeadnodesReply proto.InternalMessageInfo

func (m *GetHeadnodesReply) GetHeadnodes() map[string]bool {
	if m != nil {
		return m.Headnodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "clusrun.Empty")
	proto.RegisterType((*HeartbeatRequest)(nil), "clusrun.HeartbeatRequest")
	proto.RegisterType((*StartJobRequest)(nil), "clusrun.StartJobRequest")
	proto.RegisterType((*CancelJobRequest)(nil), "clusrun.CancelJobRequest")
	proto.RegisterType((*ValidateRequest)(nil), "clusrun.ValidateRequest")
	proto.RegisterType((*ValidateReply)(nil), "clusrun.ValidateReply")
	proto.RegisterType((*GetNodesReply)(nil), "clusrun.GetNodesReply")
	proto.RegisterType((*SetHeadnodesRequest)(nil), "clusrun.SetHeadnodesRequest")
	proto.RegisterType((*SetHeadnodesReply)(nil), "clusrun.SetHeadnodesReply")
	proto.RegisterMapType((map[string]string)(nil), "clusrun.SetHeadnodesReply.ResultsEntry")
	proto.RegisterType((*GetHeadnodesReply)(nil), "clusrun.GetHeadnodesReply")
	proto.RegisterMapType((map[string]bool)(nil), "clusrun.GetHeadnodesReply.HeadnodesEntry")
}

func init() { proto.RegisterFile("proto/clusrun.proto", fileDescriptor_681cbf33fad43e59) }

var fileDescriptor_681cbf33fad43e59 = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x4d, 0x52, 0x46, 0x93, 0xdb, 0x8f, 0x75, 0x1e, 0x42, 0x21, 0x1a, 0x62, 0xf2, 0x0b, 0x43,
	0x48, 0x45, 0xea, 0x10, 0xaa, 0xca, 0x84, 0x84, 0xa6, 0xa9, 0x63, 0x0f, 0x3c, 0x64, 0x12, 0xaf,
	0xc8, 0x6d, 0x8c, 0x56, 0x91, 0xc6, 0xc5, 0x71, 0x90, 0xc2, 0xcf, 0xe0, 0x91, 0x1f, 0xc4, 0xef,
	0x42, 0xb6, 0xe3, 0xc4, 0x4d, 0x5b, 0xf1, 0x96, 0x7b, 0xcf, 0x39, 0xc9, 0xb9, 0xf6, 0x3d, 0x81,
	0xd3, 0x0d, 0x67, 0x82, 0xbd, 0x59, 0xa6, 0x45, 0xce, 0x8b, 0x6c, 0xac, 0x2a, 0xd4, 0xad, 0x4a,
	0xdc, 0x85, 0xa3, 0x9b, 0xf5, 0x46, 0x94, 0x78, 0x06, 0xa3, 0x5b, 0x4a, 0xb8, 0x58, 0x50, 0x22,
	0x62, 0xfa, 0xa3, 0xa0, 0xb9, 0x40, 0x08, 0x1e, 0x65, 0x2c, 0xa1, 0xa1, 0x7b, 0xee, 0x5e, 0x04,
	0xb1, 0x7a, 0x96, 0xbd, 0x07, 0x96, 0x8b, 0xd0, 0xd3, 0x3d, 0xf9, 0x8c, 0xdf, 0xc3, 0xf1, 0xbd,
	0x20, 0x5c, 0xdc, 0xb1, 0x85, 0x91, 0x86, 0xd0, 0x5d, 0xb2, 0xf5, 0x9a, 0x64, 0x49, 0xa5, 0x36,
	0x25, 0x1a, 0x82, 0xb7, 0x4a, 0x94, 0x7c, 0x10, 0x7b, 0xab, 0x04, 0x4f, 0x61, 0x74, 0x4d, 0xb2,
	0x25, 0x4d, 0x2d, 0xb5, 0xe6, 0xb8, 0x86, 0x83, 0x9e, 0xc0, 0xd1, 0x37, 0xc6, 0x97, 0x54, 0xc9,
	0xfc, 0x58, 0x17, 0xf8, 0x13, 0x1c, 0x7f, 0x21, 0xe9, 0x2a, 0x21, 0x82, 0x1a, 0x61, 0x04, 0xfe,
	0x03, 0x25, 0x89, 0xe5, 0xba, 0xae, 0x25, 0x26, 0xa7, 0x56, 0x98, 0x76, 0x5f, 0xd7, 0xf8, 0x35,
	0x0c, 0x9a, 0x57, 0x6d, 0xd2, 0x52, 0x92, 0x25, 0x90, 0x91, 0x75, 0xfd, 0x22, 0x53, 0xe3, 0x0d,
	0x0c, 0xe6, 0x54, 0x7c, 0x66, 0x09, 0xcd, 0x35, 0xf9, 0x05, 0xf4, 0x38, 0x25, 0x49, 0xf9, 0x55,
	0x52, 0xf2, 0xd0, 0x3d, 0xef, 0x5c, 0x04, 0x31, 0xa8, 0x96, 0x62, 0x49, 0x02, 0xe5, 0x9c, 0xf1,
	0x8a, 0xe0, 0x69, 0x82, 0x6a, 0x69, 0xc2, 0x73, 0x80, 0x94, 0xe5, 0xa2, 0xc2, 0x3b, 0x0a, 0x0f,
	0x64, 0x47, 0xc1, 0xf8, 0x12, 0x4e, 0xef, 0xa9, 0xb8, 0xad, 0x26, 0xc9, 0xcd, 0xb4, 0x67, 0x10,
	0x98, 0xe9, 0xcc, 0x57, 0x9b, 0x06, 0xfe, 0xed, 0xc2, 0xc9, 0xb6, 0x4a, 0x7a, 0xfd, 0x08, 0x5d,
	0x4e, 0xf3, 0x22, 0x15, 0x5a, 0xd1, 0x9b, 0xbc, 0x1c, 0x9b, 0xd5, 0xd8, 0x21, 0x8f, 0x63, 0xcd,
	0xbc, 0xc9, 0x04, 0x2f, 0x63, 0xa3, 0x8b, 0x66, 0xd0, 0xb7, 0x01, 0x34, 0x82, 0xce, 0x77, 0x5a,
	0x56, 0xc7, 0x24, 0x1f, 0xe5, 0x7d, 0xfd, 0x24, 0x69, 0x61, 0xce, 0x59, 0x17, 0x33, 0x6f, 0xea,
	0xe2, 0x3f, 0x2e, 0x9c, 0xcc, 0x77, 0x4c, 0xcd, 0xdb, 0x83, 0xf4, 0x26, 0xaf, 0x6a, 0x5b, 0x3b,
	0xf4, 0x71, 0x5d, 0x6a, 0x63, 0x8d, 0x36, 0xba, 0x82, 0xe1, 0x36, 0xf8, 0x3f, 0x73, 0xbe, 0x65,
	0x6e, 0xf2, 0x0b, 0x7c, 0xa3, 0x46, 0x53, 0x08, 0xea, 0x3c, 0xa0, 0x67, 0xb5, 0x99, 0x76, 0x46,
	0xa2, 0x61, 0x0d, 0xe9, 0x1c, 0x39, 0xe8, 0x2d, 0xf8, 0x66, 0x3d, 0x50, 0x0b, 0x8d, 0x9e, 0xda,
	0x53, 0x35, 0x1b, 0x84, 0x9d, 0xc9, 0x5f, 0x0f, 0xfc, 0xeb, 0x6a, 0x1d, 0xd1, 0x3b, 0xf0, 0x4d,
	0xa0, 0x50, 0xd8, 0xdc, 0xcf, 0x76, 0xc6, 0xf6, 0x7c, 0x7a, 0x0a, 0x41, 0x9d, 0x25, 0xcb, 0x74,
	0x3b, 0x5f, 0x7b, 0x94, 0x1f, 0xc0, 0x37, 0x01, 0xb0, 0xbe, 0xd8, 0x8a, 0x97, 0x65, 0x7f, 0x2b,
	0x2d, 0xd8, 0x41, 0x77, 0xd0, 0xb7, 0xd7, 0x07, 0x9d, 0x1d, 0xd8, 0x2a, 0xfd, 0x9e, 0xe8, 0xf0,
	0xce, 0x61, 0x07, 0x5d, 0x41, 0xdf, 0xbe, 0xf3, 0x9d, 0x43, 0x8c, 0x0e, 0xaf, 0x06, 0x76, 0x16,
	0x8f, 0xd5, 0x1f, 0xee, 0xf2, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xf5, 0x82, 0x97, 0xf8,
	0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HeadnodeClient is the client API for Headnode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeadnodeClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*Empty, error)
	GetNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetNodesReply, error)
}

type headnodeClient struct {
	cc *grpc.ClientConn
}

func NewHeadnodeClient(cc *grpc.ClientConn) HeadnodeClient {
	return &headnodeClient{cc}
}

func (c *headnodeClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headnodeClient) GetNodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetNodesReply, error) {
	out := new(GetNodesReply)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeadnodeServer is the server API for Headnode service.
type HeadnodeServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*Empty, error)
	GetNodes(context.Context, *Empty) (*GetNodesReply, error)
}

// UnimplementedHeadnodeServer can be embedded to have forward compatible implementations.
type UnimplementedHeadnodeServer struct {
}

func (*UnimplementedHeadnodeServer) Heartbeat(ctx context.Context, req *HeartbeatRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (*UnimplementedHeadnodeServer) GetNodes(ctx context.Context, req *Empty) (*GetNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}

func RegisterHeadnodeServer(s *grpc.Server, srv HeadnodeServer) {
	s.RegisterService(&_Headnode_serviceDesc, srv)
}

func _Headnode_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Headnode_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).GetNodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Headnode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusrun.Headnode",
	HandlerType: (*HeadnodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Headnode_Heartbeat_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _Headnode_GetNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clusrun.proto",
}

// ClusnodeClient is the client API for Clusnode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusnodeClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*Empty, error)
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*Empty, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateReply, error)
	SetHeadnodes(ctx context.Context, in *SetHeadnodesRequest, opts ...grpc.CallOption) (*SetHeadnodesReply, error)
	GetHeadnodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetHeadnodesReply, error)
}

type clusnodeClient struct {
	cc *grpc.ClientConn
}

func NewClusnodeClient(cc *grpc.ClientConn) ClusnodeClient {
	return &clusnodeClient{cc}
}

func (c *clusnodeClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/StartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusnodeClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusnodeClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateReply, error) {
	out := new(ValidateReply)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusnodeClient) SetHeadnodes(ctx context.Context, in *SetHeadnodesRequest, opts ...grpc.CallOption) (*SetHeadnodesReply, error) {
	out := new(SetHeadnodesReply)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/SetHeadnodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusnodeClient) GetHeadnodes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetHeadnodesReply, error) {
	out := new(GetHeadnodesReply)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/GetHeadnodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusnodeServer is the server API for Clusnode service.
type ClusnodeServer interface {
	StartJob(context.Context, *StartJobRequest) (*Empty, error)
	CancelJob(context.Context, *CancelJobRequest) (*Empty, error)
	Validate(context.Context, *ValidateRequest) (*ValidateReply, error)
	SetHeadnodes(context.Context, *SetHeadnodesRequest) (*SetHeadnodesReply, error)
	GetHeadnodes(context.Context, *Empty) (*GetHeadnodesReply, error)
}

// UnimplementedClusnodeServer can be embedded to have forward compatible implementations.
type UnimplementedClusnodeServer struct {
}

func (*UnimplementedClusnodeServer) StartJob(ctx context.Context, req *StartJobRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (*UnimplementedClusnodeServer) CancelJob(ctx context.Context, req *CancelJobRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (*UnimplementedClusnodeServer) Validate(ctx context.Context, req *ValidateRequest) (*ValidateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedClusnodeServer) SetHeadnodes(ctx context.Context, req *SetHeadnodesRequest) (*SetHeadnodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHeadnodes not implemented")
}
func (*UnimplementedClusnodeServer) GetHeadnodes(ctx context.Context, req *Empty) (*GetHeadnodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeadnodes not implemented")
}

func RegisterClusnodeServer(s *grpc.Server, srv ClusnodeServer) {
	s.RegisterService(&_Clusnode_serviceDesc, srv)
}

func _Clusnode_StartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).StartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/StartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).StartJob(ctx, req.(*StartJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusnode_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusnode_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusnode_SetHeadnodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHeadnodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).SetHeadnodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/SetHeadnodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).SetHeadnodes(ctx, req.(*SetHeadnodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusnode_GetHeadnodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).GetHeadnodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/GetHeadnodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).GetHeadnodes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clusnode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusrun.Clusnode",
	HandlerType: (*ClusnodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartJob",
			Handler:    _Clusnode_StartJob_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _Clusnode_CancelJob_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Clusnode_Validate_Handler,
		},
		{
			MethodName: "SetHeadnodes",
			Handler:    _Clusnode_SetHeadnodes_Handler,
		},
		{
			MethodName: "GetHeadnodes",
			Handler:    _Clusnode_GetHeadnodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/clusrun.proto",
}
