// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: protobuf/clusrun.proto

package clusrun

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NodeState int32

const (
	NodeState_Unknown NodeState = 0
	NodeState_Ready   NodeState = 1
	NodeState_Error   NodeState = 2
	NodeState_Lost    NodeState = 3
)

// Enum value maps for NodeState.
var (
	NodeState_name = map[int32]string{
		0: "Unknown",
		1: "Ready",
		2: "Error",
		3: "Lost",
	}
	NodeState_value = map[string]int32{
		"Unknown": 0,
		"Ready":   1,
		"Error":   2,
		"Lost":    3,
	}
)

func (x NodeState) Enum() *NodeState {
	p := new(NodeState)
	*p = x
	return p
}

func (x NodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_clusrun_proto_enumTypes[0].Descriptor()
}

func (NodeState) Type() protoreflect.EnumType {
	return &file_protobuf_clusrun_proto_enumTypes[0]
}

func (x NodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeState.Descriptor instead.
func (NodeState) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{0}
}

type JobState int32

const (
	JobState_Created      JobState = 0
	JobState_Dispatching  JobState = 1
	JobState_Running      JobState = 2
	JobState_Canceling    JobState = 3
	JobState_Finished     JobState = 4
	JobState_Failed       JobState = 5
	JobState_Canceled     JobState = 6
	JobState_CancelFailed JobState = 7
)

// Enum value maps for JobState.
var (
	JobState_name = map[int32]string{
		0: "Created",
		1: "Dispatching",
		2: "Running",
		3: "Canceling",
		4: "Finished",
		5: "Failed",
		6: "Canceled",
		7: "CancelFailed",
	}
	JobState_value = map[string]int32{
		"Created":      0,
		"Dispatching":  1,
		"Running":      2,
		"Canceling":    3,
		"Finished":     4,
		"Failed":       5,
		"Canceled":     6,
		"CancelFailed": 7,
	}
)

func (x JobState) Enum() *JobState {
	p := new(JobState)
	*p = x
	return p
}

func (x JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_clusrun_proto_enumTypes[1].Descriptor()
}

func (JobState) Type() protoreflect.EnumType {
	return &file_protobuf_clusrun_proto_enumTypes[1]
}

func (x JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobState.Descriptor instead.
func (JobState) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{1}
}

type SetHeadnodesMode int32

const (
	SetHeadnodesMode_Default SetHeadnodesMode = 0
	SetHeadnodesMode_Add     SetHeadnodesMode = 1
	SetHeadnodesMode_Remove  SetHeadnodesMode = 2
)

// Enum value maps for SetHeadnodesMode.
var (
	SetHeadnodesMode_name = map[int32]string{
		0: "Default",
		1: "Add",
		2: "Remove",
	}
	SetHeadnodesMode_value = map[string]int32{
		"Default": 0,
		"Add":     1,
		"Remove":  2,
	}
)

func (x SetHeadnodesMode) Enum() *SetHeadnodesMode {
	p := new(SetHeadnodesMode)
	*p = x
	return p
}

func (x SetHeadnodesMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetHeadnodesMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_clusrun_proto_enumTypes[2].Descriptor()
}

func (SetHeadnodesMode) Type() protoreflect.EnumType {
	return &file_protobuf_clusrun_proto_enumTypes[2]
}

func (x SetHeadnodesMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetHeadnodesMode.Descriptor instead.
func (SetHeadnodesMode) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{2}
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodename string `protobuf:"bytes,1,opt,name=nodename,proto3" json:"nodename,omitempty"`
	Host     string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{0}
}

func (x *HeartbeatRequest) GetNodename() string {
	if x != nil {
		return x.Nodename
	}
	return ""
}

func (x *HeartbeatRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{1}
}

type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern         string    `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Groups          []string  `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	GroupsIntersect bool      `protobuf:"varint,3,opt,name=groups_intersect,json=groupsIntersect,proto3" json:"groups_intersect,omitempty"`
	State           NodeState `protobuf:"varint,4,opt,name=state,proto3,enum=clusrun.NodeState" json:"state,omitempty"`
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{2}
}

func (x *GetNodesRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *GetNodesRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GetNodesRequest) GetGroupsIntersect() bool {
	if x != nil {
		return x.GroupsIntersect
	}
	return false
}

func (x *GetNodesRequest) GetState() NodeState {
	if x != nil {
		return x.State
	}
	return NodeState_Unknown
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State  NodeState `protobuf:"varint,2,opt,name=state,proto3,enum=clusrun.NodeState" json:"state,omitempty"`
	Jobs   []int32   `protobuf:"varint,3,rep,packed,name=jobs,proto3" json:"jobs,omitempty"`
	Groups []string  `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetState() NodeState {
	if x != nil {
		return x.State
	}
	return NodeState_Unknown
}

func (x *Node) GetJobs() []int32 {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *Node) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetNodesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *GetNodesReply) Reset() {
	*x = GetNodesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesReply) ProtoMessage() {}

func (x *GetNodesReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesReply.ProtoReflect.Descriptor instead.
func (*GetNodesReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{4}
}

func (x *GetNodesReply) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type GetJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobIds map[int32]bool `protobuf:"bytes,1,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *GetJobsRequest) Reset() {
	*x = GetJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest) ProtoMessage() {}

func (x *GetJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsRequest.ProtoReflect.Descriptor instead.
func (*GetJobsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{5}
}

func (x *GetJobsRequest) GetJobIds() map[int32]bool {
	if x != nil {
		return x.JobIds
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Command           string           `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Sweep             string           `protobuf:"bytes,3,opt,name=sweep,proto3" json:"sweep,omitempty"`
	Nodes             []string         `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	CreateTime        int64            `protobuf:"varint,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	EndTime           int64            `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	State             JobState         `protobuf:"varint,7,opt,name=state,proto3,enum=clusrun.JobState" json:"state,omitempty"`
	FailedNodes       map[string]int32 `protobuf:"bytes,8,rep,name=failed_nodes,json=failedNodes,proto3" json:"failed_nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CancelFailedNodes []string         `protobuf:"bytes,9,rep,name=cancel_failed_nodes,json=cancelFailedNodes,proto3" json:"cancel_failed_nodes,omitempty"`
	SpecifiedNodes    []string         `protobuf:"bytes,10,rep,name=specified_nodes,json=specifiedNodes,proto3" json:"specified_nodes,omitempty"`
	NodeGroups        []string         `protobuf:"bytes,11,rep,name=node_groups,json=nodeGroups,proto3" json:"node_groups,omitempty"`
	NodePattern       string           `protobuf:"bytes,12,opt,name=node_pattern,json=nodePattern,proto3" json:"node_pattern,omitempty"`
	Progress          string           `protobuf:"bytes,13,opt,name=progress,proto3" json:"progress,omitempty"`
	Arguments         []string         `protobuf:"bytes,14,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{6}
}

func (x *Job) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Job) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Job) GetSweep() string {
	if x != nil {
		return x.Sweep
	}
	return ""
}

func (x *Job) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Job) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Job) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Job) GetState() JobState {
	if x != nil {
		return x.State
	}
	return JobState_Created
}

func (x *Job) GetFailedNodes() map[string]int32 {
	if x != nil {
		return x.FailedNodes
	}
	return nil
}

func (x *Job) GetCancelFailedNodes() []string {
	if x != nil {
		return x.CancelFailedNodes
	}
	return nil
}

func (x *Job) GetSpecifiedNodes() []string {
	if x != nil {
		return x.SpecifiedNodes
	}
	return nil
}

func (x *Job) GetNodeGroups() []string {
	if x != nil {
		return x.NodeGroups
	}
	return nil
}

func (x *Job) GetNodePattern() string {
	if x != nil {
		return x.NodePattern
	}
	return ""
}

func (x *Job) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *Job) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type GetJobsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *GetJobsReply) Reset() {
	*x = GetJobsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsReply) ProtoMessage() {}

func (x *GetJobsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsReply.ProtoReflect.Descriptor instead.
func (*GetJobsReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{7}
}

func (x *GetJobsReply) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type GetOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int32  `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Node  string `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *GetOutputRequest) Reset() {
	*x = GetOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutputRequest) ProtoMessage() {}

func (x *GetOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutputRequest.ProtoReflect.Descriptor instead.
func (*GetOutputRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{8}
}

func (x *GetOutputRequest) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *GetOutputRequest) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

type GetOutputReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node   string `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Stdout string `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr string `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *GetOutputReply) Reset() {
	*x = GetOutputReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOutputReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOutputReply) ProtoMessage() {}

func (x *GetOutputReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOutputReply.ProtoReflect.Descriptor instead.
func (*GetOutputReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{9}
}

func (x *GetOutputReply) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *GetOutputReply) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *GetOutputReply) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type StartClusJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command         string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Nodes           []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Pattern         string   `protobuf:"bytes,3,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Groups          []string `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	GroupsIntersect bool     `protobuf:"varint,5,opt,name=groups_intersect,json=groupsIntersect,proto3" json:"groups_intersect,omitempty"`
	Sweep           string   `protobuf:"bytes,6,opt,name=sweep,proto3" json:"sweep,omitempty"`
	Arguments       []string `protobuf:"bytes,7,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *StartClusJobRequest) Reset() {
	*x = StartClusJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartClusJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusJobRequest) ProtoMessage() {}

func (x *StartClusJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusJobRequest.ProtoReflect.Descriptor instead.
func (*StartClusJobRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{10}
}

func (x *StartClusJobRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *StartClusJobRequest) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *StartClusJobRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *StartClusJobRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *StartClusJobRequest) GetGroupsIntersect() bool {
	if x != nil {
		return x.GroupsIntersect
	}
	return false
}

func (x *StartClusJobRequest) GetSweep() string {
	if x != nil {
		return x.Sweep
	}
	return ""
}

func (x *StartClusJobRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type StartClusJobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId    int32    `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Nodes    []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Node     string   `protobuf:"bytes,3,opt,name=node,proto3" json:"node,omitempty"`
	Stdout   string   `protobuf:"bytes,4,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr   string   `protobuf:"bytes,5,opt,name=stderr,proto3" json:"stderr,omitempty"`
	ExitCode int32    `protobuf:"zigzag32,6,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *StartClusJobReply) Reset() {
	*x = StartClusJobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartClusJobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartClusJobReply) ProtoMessage() {}

func (x *StartClusJobReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartClusJobReply.ProtoReflect.Descriptor instead.
func (*StartClusJobReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{11}
}

func (x *StartClusJobReply) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *StartClusJobReply) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *StartClusJobReply) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *StartClusJobReply) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *StartClusJobReply) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *StartClusJobReply) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type CancelClusJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobIds map[int32]bool `protobuf:"bytes,1,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CancelClusJobsRequest) Reset() {
	*x = CancelClusJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelClusJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelClusJobsRequest) ProtoMessage() {}

func (x *CancelClusJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelClusJobsRequest.ProtoReflect.Descriptor instead.
func (*CancelClusJobsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{12}
}

func (x *CancelClusJobsRequest) GetJobIds() map[int32]bool {
	if x != nil {
		return x.JobIds
	}
	return nil
}

type CancelClusJobsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[int32]JobState `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=clusrun.JobState"`
}

func (x *CancelClusJobsReply) Reset() {
	*x = CancelClusJobsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelClusJobsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelClusJobsReply) ProtoMessage() {}

func (x *CancelClusJobsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelClusJobsReply.ProtoReflect.Descriptor instead.
func (*CancelClusJobsReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{13}
}

func (x *CancelClusJobsReply) GetResult() map[int32]JobState {
	if x != nil {
		return x.Result
	}
	return nil
}

type StartJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headnode  string   `protobuf:"bytes,1,opt,name=headnode,proto3" json:"headnode,omitempty"`
	JobId     int32    `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Command   string   `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	Arguments []string `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *StartJobRequest) Reset() {
	*x = StartJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobRequest) ProtoMessage() {}

func (x *StartJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobRequest.ProtoReflect.Descriptor instead.
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{14}
}

func (x *StartJobRequest) GetHeadnode() string {
	if x != nil {
		return x.Headnode
	}
	return ""
}

func (x *StartJobRequest) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *StartJobRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *StartJobRequest) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type StartJobReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stdout   string `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr   string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
	ExitCode int32  `protobuf:"zigzag32,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *StartJobReply) Reset() {
	*x = StartJobReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartJobReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobReply) ProtoMessage() {}

func (x *StartJobReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobReply.ProtoReflect.Descriptor instead.
func (*StartJobReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{15}
}

func (x *StartJobReply) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *StartJobReply) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *StartJobReply) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type CancelJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headnode string `protobuf:"bytes,1,opt,name=headnode,proto3" json:"headnode,omitempty"`
	JobId    int32  `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Force    bool   `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{16}
}

func (x *CancelJobRequest) GetHeadnode() string {
	if x != nil {
		return x.Headnode
	}
	return ""
}

func (x *CancelJobRequest) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *CancelJobRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type ValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headnode string `protobuf:"bytes,1,opt,name=headnode,proto3" json:"headnode,omitempty"`
	Clusnode string `protobuf:"bytes,2,opt,name=clusnode,proto3" json:"clusnode,omitempty"`
}

func (x *ValidateRequest) Reset() {
	*x = ValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRequest) ProtoMessage() {}

func (x *ValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRequest.ProtoReflect.Descriptor instead.
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{17}
}

func (x *ValidateRequest) GetHeadnode() string {
	if x != nil {
		return x.Headnode
	}
	return ""
}

func (x *ValidateRequest) GetClusnode() string {
	if x != nil {
		return x.Clusnode
	}
	return ""
}

type ValidateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodename string `protobuf:"bytes,1,opt,name=nodename,proto3" json:"nodename,omitempty"`
}

func (x *ValidateReply) Reset() {
	*x = ValidateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateReply) ProtoMessage() {}

func (x *ValidateReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateReply.ProtoReflect.Descriptor instead.
func (*ValidateReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{18}
}

func (x *ValidateReply) GetNodename() string {
	if x != nil {
		return x.Nodename
	}
	return ""
}

type SetNodeGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []string `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	Nodes  []*Node  `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Remove bool     `protobuf:"varint,3,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (x *SetNodeGroupsRequest) Reset() {
	*x = SetNodeGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeGroupsRequest) ProtoMessage() {}

func (x *SetNodeGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeGroupsRequest.ProtoReflect.Descriptor instead.
func (*SetNodeGroupsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{19}
}

func (x *SetNodeGroupsRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *SetNodeGroupsRequest) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *SetNodeGroupsRequest) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

type SetHeadnodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headnodes []string         `protobuf:"bytes,1,rep,name=headnodes,proto3" json:"headnodes,omitempty"`
	Mode      SetHeadnodesMode `protobuf:"varint,2,opt,name=mode,proto3,enum=clusrun.SetHeadnodesMode" json:"mode,omitempty"`
}

func (x *SetHeadnodesRequest) Reset() {
	*x = SetHeadnodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHeadnodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHeadnodesRequest) ProtoMessage() {}

func (x *SetHeadnodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHeadnodesRequest.ProtoReflect.Descriptor instead.
func (*SetHeadnodesRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{20}
}

func (x *SetHeadnodesRequest) GetHeadnodes() []string {
	if x != nil {
		return x.Headnodes
	}
	return nil
}

func (x *SetHeadnodesRequest) GetMode() SetHeadnodesMode {
	if x != nil {
		return x.Mode
	}
	return SetHeadnodesMode_Default
}

type SetHeadnodesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetHeadnodesReply) Reset() {
	*x = SetHeadnodesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetHeadnodesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetHeadnodesReply) ProtoMessage() {}

func (x *SetHeadnodesReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetHeadnodesReply.ProtoReflect.Descriptor instead.
func (*SetHeadnodesReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{21}
}

func (x *SetHeadnodesReply) GetResults() map[string]string {
	if x != nil {
		return x.Results
	}
	return nil
}

type SetConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs map[string]string `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetConfigsRequest) Reset() {
	*x = SetConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigsRequest) ProtoMessage() {}

func (x *SetConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigsRequest.ProtoReflect.Descriptor instead.
func (*SetConfigsRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{22}
}

func (x *SetConfigsRequest) GetConfigs() map[string]string {
	if x != nil {
		return x.Configs
	}
	return nil
}

type SetConfigsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results map[string]string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SetConfigsReply) Reset() {
	*x = SetConfigsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigsReply) ProtoMessage() {}

func (x *SetConfigsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigsReply.ProtoReflect.Descriptor instead.
func (*SetConfigsReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{23}
}

func (x *SetConfigsReply) GetResults() map[string]string {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetConfigsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs map[string]string `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetConfigsReply) Reset() {
	*x = GetConfigsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_clusrun_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigsReply) ProtoMessage() {}

func (x *GetConfigsReply) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_clusrun_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigsReply.ProtoReflect.Descriptor instead.
func (*GetConfigsReply) Descriptor() ([]byte, []int) {
	return file_protobuf_clusrun_proto_rawDescGZIP(), []int{24}
}

func (x *GetConfigsReply) GetConfigs() map[string]string {
	if x != nil {
		return x.Configs
	}
	return nil
}

var File_protobuf_clusrun_proto protoreflect.FileDescriptor

var file_protobuf_clusrun_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x72,
	0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75,
	0x6e, 0x22, 0x42, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x98,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x12,
	0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x70, 0x0a, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x6a,
	0x6f, 0x62, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x34, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a,
	0x6f, 0x62, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x04,
	0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x77, 0x65, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x77, 0x65, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e,
	0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e,
	0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x04, 0x6a, 0x6f, 0x62,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75,
	0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x3d, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x54, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x22, 0xd6, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x77, 0x65, 0x65, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x77, 0x65, 0x65, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x6a, 0x6f, 0x62, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72,
	0x75, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x4a, 0x6f, 0x62, 0x49, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x4c, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x7c, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5c, 0x0a,
	0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x10, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a,
	0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x6e,
	0x6f, 0x64, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x6b, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x62, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72,
	0x75, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a,
	0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3f, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x38, 0x0a,
	0x09, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x4c, 0x6f, 0x73, 0x74, 0x10, 0x03, 0x2a, 0x7e, 0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x2a, 0x34, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x02, 0x32, 0xe8, 0x04,
	0x0a, 0x08, 0x48, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75,
	0x6e, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x72, 0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12,
	0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72,
	0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x43, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19,
	0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6c, 0x75, 0x73,
	0x72, 0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x50, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c,
	0x75, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x6c, 0x75, 0x73, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x0e, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x72, 0x75, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x75,
	0x73, 0x72, 0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x92, 0x03, 0x0a, 0x08, 0x43, 0x6c, 0x75,
	0x73, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f,
	0x62, 0x12, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x19, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75,
	0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0a, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1a, 0x2e, 0x63, 0x6c,
	0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75,
	0x6e, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x12, 0x0e, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x12, 0x5a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x3b, 0x63, 0x6c, 0x75, 0x73, 0x72, 0x75,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_clusrun_proto_rawDescOnce sync.Once
	file_protobuf_clusrun_proto_rawDescData = file_protobuf_clusrun_proto_rawDesc
)

func file_protobuf_clusrun_proto_rawDescGZIP() []byte {
	file_protobuf_clusrun_proto_rawDescOnce.Do(func() {
		file_protobuf_clusrun_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_clusrun_proto_rawDescData)
	})
	return file_protobuf_clusrun_proto_rawDescData
}

var file_protobuf_clusrun_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_protobuf_clusrun_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_protobuf_clusrun_proto_goTypes = []interface{}{
	(NodeState)(0),                // 0: clusrun.NodeState
	(JobState)(0),                 // 1: clusrun.JobState
	(SetHeadnodesMode)(0),         // 2: clusrun.SetHeadnodesMode
	(*HeartbeatRequest)(nil),      // 3: clusrun.HeartbeatRequest
	(*Empty)(nil),                 // 4: clusrun.Empty
	(*GetNodesRequest)(nil),       // 5: clusrun.GetNodesRequest
	(*Node)(nil),                  // 6: clusrun.Node
	(*GetNodesReply)(nil),         // 7: clusrun.GetNodesReply
	(*GetJobsRequest)(nil),        // 8: clusrun.GetJobsRequest
	(*Job)(nil),                   // 9: clusrun.Job
	(*GetJobsReply)(nil),          // 10: clusrun.GetJobsReply
	(*GetOutputRequest)(nil),      // 11: clusrun.GetOutputRequest
	(*GetOutputReply)(nil),        // 12: clusrun.GetOutputReply
	(*StartClusJobRequest)(nil),   // 13: clusrun.StartClusJobRequest
	(*StartClusJobReply)(nil),     // 14: clusrun.StartClusJobReply
	(*CancelClusJobsRequest)(nil), // 15: clusrun.CancelClusJobsRequest
	(*CancelClusJobsReply)(nil),   // 16: clusrun.CancelClusJobsReply
	(*StartJobRequest)(nil),       // 17: clusrun.StartJobRequest
	(*StartJobReply)(nil),         // 18: clusrun.StartJobReply
	(*CancelJobRequest)(nil),      // 19: clusrun.CancelJobRequest
	(*ValidateRequest)(nil),       // 20: clusrun.ValidateRequest
	(*ValidateReply)(nil),         // 21: clusrun.ValidateReply
	(*SetNodeGroupsRequest)(nil),  // 22: clusrun.SetNodeGroupsRequest
	(*SetHeadnodesRequest)(nil),   // 23: clusrun.SetHeadnodesRequest
	(*SetHeadnodesReply)(nil),     // 24: clusrun.SetHeadnodesReply
	(*SetConfigsRequest)(nil),     // 25: clusrun.SetConfigsRequest
	(*SetConfigsReply)(nil),       // 26: clusrun.SetConfigsReply
	(*GetConfigsReply)(nil),       // 27: clusrun.GetConfigsReply
	nil,                           // 28: clusrun.GetJobsRequest.JobIdsEntry
	nil,                           // 29: clusrun.Job.FailedNodesEntry
	nil,                           // 30: clusrun.CancelClusJobsRequest.JobIdsEntry
	nil,                           // 31: clusrun.CancelClusJobsReply.ResultEntry
	nil,                           // 32: clusrun.SetHeadnodesReply.ResultsEntry
	nil,                           // 33: clusrun.SetConfigsRequest.ConfigsEntry
	nil,                           // 34: clusrun.SetConfigsReply.ResultsEntry
	nil,                           // 35: clusrun.GetConfigsReply.ConfigsEntry
}
var file_protobuf_clusrun_proto_depIdxs = []int32{
	0,  // 0: clusrun.GetNodesRequest.state:type_name -> clusrun.NodeState
	0,  // 1: clusrun.Node.state:type_name -> clusrun.NodeState
	6,  // 2: clusrun.GetNodesReply.nodes:type_name -> clusrun.Node
	28, // 3: clusrun.GetJobsRequest.job_ids:type_name -> clusrun.GetJobsRequest.JobIdsEntry
	1,  // 4: clusrun.Job.state:type_name -> clusrun.JobState
	29, // 5: clusrun.Job.failed_nodes:type_name -> clusrun.Job.FailedNodesEntry
	9,  // 6: clusrun.GetJobsReply.jobs:type_name -> clusrun.Job
	30, // 7: clusrun.CancelClusJobsRequest.job_ids:type_name -> clusrun.CancelClusJobsRequest.JobIdsEntry
	31, // 8: clusrun.CancelClusJobsReply.result:type_name -> clusrun.CancelClusJobsReply.ResultEntry
	6,  // 9: clusrun.SetNodeGroupsRequest.nodes:type_name -> clusrun.Node
	2,  // 10: clusrun.SetHeadnodesRequest.mode:type_name -> clusrun.SetHeadnodesMode
	32, // 11: clusrun.SetHeadnodesReply.results:type_name -> clusrun.SetHeadnodesReply.ResultsEntry
	33, // 12: clusrun.SetConfigsRequest.configs:type_name -> clusrun.SetConfigsRequest.ConfigsEntry
	34, // 13: clusrun.SetConfigsReply.results:type_name -> clusrun.SetConfigsReply.ResultsEntry
	35, // 14: clusrun.GetConfigsReply.configs:type_name -> clusrun.GetConfigsReply.ConfigsEntry
	1,  // 15: clusrun.CancelClusJobsReply.ResultEntry.value:type_name -> clusrun.JobState
	3,  // 16: clusrun.Headnode.Heartbeat:input_type -> clusrun.HeartbeatRequest
	5,  // 17: clusrun.Headnode.GetNodes:input_type -> clusrun.GetNodesRequest
	8,  // 18: clusrun.Headnode.GetJobs:input_type -> clusrun.GetJobsRequest
	11, // 19: clusrun.Headnode.GetOutput:input_type -> clusrun.GetOutputRequest
	13, // 20: clusrun.Headnode.StartClusJob:input_type -> clusrun.StartClusJobRequest
	15, // 21: clusrun.Headnode.CancelClusJobs:input_type -> clusrun.CancelClusJobsRequest
	25, // 22: clusrun.Headnode.SetConfigs:input_type -> clusrun.SetConfigsRequest
	4,  // 23: clusrun.Headnode.GetConfigs:input_type -> clusrun.Empty
	22, // 24: clusrun.Headnode.SetNodeGroups:input_type -> clusrun.SetNodeGroupsRequest
	17, // 25: clusrun.Clusnode.StartJob:input_type -> clusrun.StartJobRequest
	19, // 26: clusrun.Clusnode.CancelJob:input_type -> clusrun.CancelJobRequest
	20, // 27: clusrun.Clusnode.Validate:input_type -> clusrun.ValidateRequest
	23, // 28: clusrun.Clusnode.SetHeadnodes:input_type -> clusrun.SetHeadnodesRequest
	25, // 29: clusrun.Clusnode.SetConfigs:input_type -> clusrun.SetConfigsRequest
	4,  // 30: clusrun.Clusnode.GetConfigs:input_type -> clusrun.Empty
	4,  // 31: clusrun.Headnode.Heartbeat:output_type -> clusrun.Empty
	7,  // 32: clusrun.Headnode.GetNodes:output_type -> clusrun.GetNodesReply
	10, // 33: clusrun.Headnode.GetJobs:output_type -> clusrun.GetJobsReply
	12, // 34: clusrun.Headnode.GetOutput:output_type -> clusrun.GetOutputReply
	14, // 35: clusrun.Headnode.StartClusJob:output_type -> clusrun.StartClusJobReply
	16, // 36: clusrun.Headnode.CancelClusJobs:output_type -> clusrun.CancelClusJobsReply
	26, // 37: clusrun.Headnode.SetConfigs:output_type -> clusrun.SetConfigsReply
	27, // 38: clusrun.Headnode.GetConfigs:output_type -> clusrun.GetConfigsReply
	4,  // 39: clusrun.Headnode.SetNodeGroups:output_type -> clusrun.Empty
	18, // 40: clusrun.Clusnode.StartJob:output_type -> clusrun.StartJobReply
	4,  // 41: clusrun.Clusnode.CancelJob:output_type -> clusrun.Empty
	21, // 42: clusrun.Clusnode.Validate:output_type -> clusrun.ValidateReply
	24, // 43: clusrun.Clusnode.SetHeadnodes:output_type -> clusrun.SetHeadnodesReply
	26, // 44: clusrun.Clusnode.SetConfigs:output_type -> clusrun.SetConfigsReply
	27, // 45: clusrun.Clusnode.GetConfigs:output_type -> clusrun.GetConfigsReply
	31, // [31:46] is the sub-list for method output_type
	16, // [16:31] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_protobuf_clusrun_proto_init() }
func file_protobuf_clusrun_proto_init() {
	if File_protobuf_clusrun_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_clusrun_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOutputReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartClusJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartClusJobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelClusJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelClusJobsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartJobReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHeadnodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetHeadnodesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConfigsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_clusrun_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_clusrun_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_protobuf_clusrun_proto_goTypes,
		DependencyIndexes: file_protobuf_clusrun_proto_depIdxs,
		EnumInfos:         file_protobuf_clusrun_proto_enumTypes,
		MessageInfos:      file_protobuf_clusrun_proto_msgTypes,
	}.Build()
	File_protobuf_clusrun_proto = out.File
	file_protobuf_clusrun_proto_rawDesc = nil
	file_protobuf_clusrun_proto_goTypes = nil
	file_protobuf_clusrun_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HeadnodeClient is the client API for Headnode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HeadnodeClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*Empty, error)
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesReply, error)
	GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsReply, error)
	GetOutput(ctx context.Context, in *GetOutputRequest, opts ...grpc.CallOption) (Headnode_GetOutputClient, error)
	StartClusJob(ctx context.Context, in *StartClusJobRequest, opts ...grpc.CallOption) (Headnode_StartClusJobClient, error)
	CancelClusJobs(ctx context.Context, in *CancelClusJobsRequest, opts ...grpc.CallOption) (*CancelClusJobsReply, error)
	SetConfigs(ctx context.Context, in *SetConfigsRequest, opts ...grpc.CallOption) (*SetConfigsReply, error)
	GetConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigsReply, error)
	SetNodeGroups(ctx context.Context, in *SetNodeGroupsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type headnodeClient struct {
	cc grpc.ClientConnInterface
}

func NewHeadnodeClient(cc grpc.ClientConnInterface) HeadnodeClient {
	return &headnodeClient{cc}
}

func (c *headnodeClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headnodeClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesReply, error) {
	out := new(GetNodesReply)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headnodeClient) GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsReply, error) {
	out := new(GetJobsReply)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headnodeClient) GetOutput(ctx context.Context, in *GetOutputRequest, opts ...grpc.CallOption) (Headnode_GetOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Headnode_serviceDesc.Streams[0], "/clusrun.Headnode/GetOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &headnodeGetOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Headnode_GetOutputClient interface {
	Recv() (*GetOutputReply, error)
	grpc.ClientStream
}

type headnodeGetOutputClient struct {
	grpc.ClientStream
}

func (x *headnodeGetOutputClient) Recv() (*GetOutputReply, error) {
	m := new(GetOutputReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *headnodeClient) StartClusJob(ctx context.Context, in *StartClusJobRequest, opts ...grpc.CallOption) (Headnode_StartClusJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Headnode_serviceDesc.Streams[1], "/clusrun.Headnode/StartClusJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &headnodeStartClusJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Headnode_StartClusJobClient interface {
	Recv() (*StartClusJobReply, error)
	grpc.ClientStream
}

type headnodeStartClusJobClient struct {
	grpc.ClientStream
}

func (x *headnodeStartClusJobClient) Recv() (*StartClusJobReply, error) {
	m := new(StartClusJobReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *headnodeClient) CancelClusJobs(ctx context.Context, in *CancelClusJobsRequest, opts ...grpc.CallOption) (*CancelClusJobsReply, error) {
	out := new(CancelClusJobsReply)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/CancelClusJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headnodeClient) SetConfigs(ctx context.Context, in *SetConfigsRequest, opts ...grpc.CallOption) (*SetConfigsReply, error) {
	out := new(SetConfigsReply)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/SetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headnodeClient) GetConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigsReply, error) {
	out := new(GetConfigsReply)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/GetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *headnodeClient) SetNodeGroups(ctx context.Context, in *SetNodeGroupsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/clusrun.Headnode/SetNodeGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HeadnodeServer is the server API for Headnode service.
type HeadnodeServer interface {
	Heartbeat(context.Context, *HeartbeatRequest) (*Empty, error)
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesReply, error)
	GetJobs(context.Context, *GetJobsRequest) (*GetJobsReply, error)
	GetOutput(*GetOutputRequest, Headnode_GetOutputServer) error
	StartClusJob(*StartClusJobRequest, Headnode_StartClusJobServer) error
	CancelClusJobs(context.Context, *CancelClusJobsRequest) (*CancelClusJobsReply, error)
	SetConfigs(context.Context, *SetConfigsRequest) (*SetConfigsReply, error)
	GetConfigs(context.Context, *Empty) (*GetConfigsReply, error)
	SetNodeGroups(context.Context, *SetNodeGroupsRequest) (*Empty, error)
}

// UnimplementedHeadnodeServer can be embedded to have forward compatible implementations.
type UnimplementedHeadnodeServer struct {
}

func (*UnimplementedHeadnodeServer) Heartbeat(context.Context, *HeartbeatRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (*UnimplementedHeadnodeServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (*UnimplementedHeadnodeServer) GetJobs(context.Context, *GetJobsRequest) (*GetJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (*UnimplementedHeadnodeServer) GetOutput(*GetOutputRequest, Headnode_GetOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOutput not implemented")
}
func (*UnimplementedHeadnodeServer) StartClusJob(*StartClusJobRequest, Headnode_StartClusJobServer) error {
	return status.Errorf(codes.Unimplemented, "method StartClusJob not implemented")
}
func (*UnimplementedHeadnodeServer) CancelClusJobs(context.Context, *CancelClusJobsRequest) (*CancelClusJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelClusJobs not implemented")
}
func (*UnimplementedHeadnodeServer) SetConfigs(context.Context, *SetConfigsRequest) (*SetConfigsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigs not implemented")
}
func (*UnimplementedHeadnodeServer) GetConfigs(context.Context, *Empty) (*GetConfigsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigs not implemented")
}
func (*UnimplementedHeadnodeServer) SetNodeGroups(context.Context, *SetNodeGroupsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeGroups not implemented")
}

func RegisterHeadnodeServer(s *grpc.Server, srv HeadnodeServer) {
	s.RegisterService(&_Headnode_serviceDesc, srv)
}

func _Headnode_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Headnode_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Headnode_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).GetJobs(ctx, req.(*GetJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Headnode_GetOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOutputRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeadnodeServer).GetOutput(m, &headnodeGetOutputServer{stream})
}

type Headnode_GetOutputServer interface {
	Send(*GetOutputReply) error
	grpc.ServerStream
}

type headnodeGetOutputServer struct {
	grpc.ServerStream
}

func (x *headnodeGetOutputServer) Send(m *GetOutputReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Headnode_StartClusJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartClusJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HeadnodeServer).StartClusJob(m, &headnodeStartClusJobServer{stream})
}

type Headnode_StartClusJobServer interface {
	Send(*StartClusJobReply) error
	grpc.ServerStream
}

type headnodeStartClusJobServer struct {
	grpc.ServerStream
}

func (x *headnodeStartClusJobServer) Send(m *StartClusJobReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Headnode_CancelClusJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelClusJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).CancelClusJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/CancelClusJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).CancelClusJobs(ctx, req.(*CancelClusJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Headnode_SetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).SetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/SetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).SetConfigs(ctx, req.(*SetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Headnode_GetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).GetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/GetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).GetConfigs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Headnode_SetNodeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeadnodeServer).SetNodeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Headnode/SetNodeGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeadnodeServer).SetNodeGroups(ctx, req.(*SetNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Headnode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusrun.Headnode",
	HandlerType: (*HeadnodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Headnode_Heartbeat_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _Headnode_GetNodes_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _Headnode_GetJobs_Handler,
		},
		{
			MethodName: "CancelClusJobs",
			Handler:    _Headnode_CancelClusJobs_Handler,
		},
		{
			MethodName: "SetConfigs",
			Handler:    _Headnode_SetConfigs_Handler,
		},
		{
			MethodName: "GetConfigs",
			Handler:    _Headnode_GetConfigs_Handler,
		},
		{
			MethodName: "SetNodeGroups",
			Handler:    _Headnode_SetNodeGroups_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOutput",
			Handler:       _Headnode_GetOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StartClusJob",
			Handler:       _Headnode_StartClusJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/clusrun.proto",
}

// ClusnodeClient is the client API for Clusnode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusnodeClient interface {
	StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (Clusnode_StartJobClient, error)
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*Empty, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateReply, error)
	SetHeadnodes(ctx context.Context, in *SetHeadnodesRequest, opts ...grpc.CallOption) (*SetHeadnodesReply, error)
	SetConfigs(ctx context.Context, in *SetConfigsRequest, opts ...grpc.CallOption) (*SetConfigsReply, error)
	GetConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigsReply, error)
}

type clusnodeClient struct {
	cc grpc.ClientConnInterface
}

func NewClusnodeClient(cc grpc.ClientConnInterface) ClusnodeClient {
	return &clusnodeClient{cc}
}

func (c *clusnodeClient) StartJob(ctx context.Context, in *StartJobRequest, opts ...grpc.CallOption) (Clusnode_StartJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Clusnode_serviceDesc.Streams[0], "/clusrun.Clusnode/StartJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusnodeStartJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Clusnode_StartJobClient interface {
	Recv() (*StartJobReply, error)
	grpc.ClientStream
}

type clusnodeStartJobClient struct {
	grpc.ClientStream
}

func (x *clusnodeStartJobClient) Recv() (*StartJobReply, error) {
	m := new(StartJobReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusnodeClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/CancelJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusnodeClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateReply, error) {
	out := new(ValidateReply)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusnodeClient) SetHeadnodes(ctx context.Context, in *SetHeadnodesRequest, opts ...grpc.CallOption) (*SetHeadnodesReply, error) {
	out := new(SetHeadnodesReply)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/SetHeadnodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusnodeClient) SetConfigs(ctx context.Context, in *SetConfigsRequest, opts ...grpc.CallOption) (*SetConfigsReply, error) {
	out := new(SetConfigsReply)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/SetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusnodeClient) GetConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigsReply, error) {
	out := new(GetConfigsReply)
	err := c.cc.Invoke(ctx, "/clusrun.Clusnode/GetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusnodeServer is the server API for Clusnode service.
type ClusnodeServer interface {
	StartJob(*StartJobRequest, Clusnode_StartJobServer) error
	CancelJob(context.Context, *CancelJobRequest) (*Empty, error)
	Validate(context.Context, *ValidateRequest) (*ValidateReply, error)
	SetHeadnodes(context.Context, *SetHeadnodesRequest) (*SetHeadnodesReply, error)
	SetConfigs(context.Context, *SetConfigsRequest) (*SetConfigsReply, error)
	GetConfigs(context.Context, *Empty) (*GetConfigsReply, error)
}

// UnimplementedClusnodeServer can be embedded to have forward compatible implementations.
type UnimplementedClusnodeServer struct {
}

func (*UnimplementedClusnodeServer) StartJob(*StartJobRequest, Clusnode_StartJobServer) error {
	return status.Errorf(codes.Unimplemented, "method StartJob not implemented")
}
func (*UnimplementedClusnodeServer) CancelJob(context.Context, *CancelJobRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (*UnimplementedClusnodeServer) Validate(context.Context, *ValidateRequest) (*ValidateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (*UnimplementedClusnodeServer) SetHeadnodes(context.Context, *SetHeadnodesRequest) (*SetHeadnodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHeadnodes not implemented")
}
func (*UnimplementedClusnodeServer) SetConfigs(context.Context, *SetConfigsRequest) (*SetConfigsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfigs not implemented")
}
func (*UnimplementedClusnodeServer) GetConfigs(context.Context, *Empty) (*GetConfigsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigs not implemented")
}

func RegisterClusnodeServer(s *grpc.Server, srv ClusnodeServer) {
	s.RegisterService(&_Clusnode_serviceDesc, srv)
}

func _Clusnode_StartJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusnodeServer).StartJob(m, &clusnodeStartJobServer{stream})
}

type Clusnode_StartJobServer interface {
	Send(*StartJobReply) error
	grpc.ServerStream
}

type clusnodeStartJobServer struct {
	grpc.ServerStream
}

func (x *clusnodeStartJobServer) Send(m *StartJobReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Clusnode_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/CancelJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusnode_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusnode_SetHeadnodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHeadnodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).SetHeadnodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/SetHeadnodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).SetHeadnodes(ctx, req.(*SetHeadnodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusnode_SetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).SetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/SetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).SetConfigs(ctx, req.(*SetConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Clusnode_GetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusnodeServer).GetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clusrun.Clusnode/GetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusnodeServer).GetConfigs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clusnode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusrun.Clusnode",
	HandlerType: (*ClusnodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelJob",
			Handler:    _Clusnode_CancelJob_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Clusnode_Validate_Handler,
		},
		{
			MethodName: "SetHeadnodes",
			Handler:    _Clusnode_SetHeadnodes_Handler,
		},
		{
			MethodName: "SetConfigs",
			Handler:    _Clusnode_SetConfigs_Handler,
		},
		{
			MethodName: "GetConfigs",
			Handler:    _Clusnode_GetConfigs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartJob",
			Handler:       _Clusnode_StartJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/clusrun.proto",
}
