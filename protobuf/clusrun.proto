// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package clusrun;

service Headnode {
  rpc Heartbeat (HeartbeatRequest) returns (Empty) {}
  rpc GetNodes (GetNodesRequest) returns (GetNodesReply) {}
  rpc GetJobs (GetJobsRequest) returns (GetJobsReply) {}
  rpc GetOutput (GetOutputRequest) returns (stream GetOutputReply) {}
  rpc StartClusJob (StartClusJobRequest) returns (stream StartClusJobReply) {}
  rpc CancelClusJobs (CancelClusJobsRequest) returns (CancelClusJobsReply) {}
  rpc SetConfigs (SetConfigsRequest) returns (SetConfigsReply) {}
  rpc GetConfigs (Empty) returns (GetConfigsReply) {}
  rpc SetNodeGroups (SetNodeGroupsRequest) returns (Empty) {}
}

service Clusnode {
  rpc StartJob (StartJobRequest) returns (stream StartJobReply) {}
  rpc CancelJob (CancelJobRequest) returns (Empty) {}
  rpc Validate (ValidateRequest) returns (ValidateReply) {}
  rpc SetHeadnodes(SetHeadnodesRequest) returns (SetHeadnodesReply) {}
  rpc SetConfigs (SetConfigsRequest) returns (SetConfigsReply) {}
  rpc GetConfigs (Empty) returns (GetConfigsReply) {}
}

message HeartbeatRequest {
  string nodename = 1;
  string host = 2;
}

message Empty {
}

enum NodeState {
  Unknown = 0;
  Ready   = 1;
  Error   = 2;
  Lost    = 3;
}

message GetNodesRequest {
  string pattern = 1;
  repeated string groups = 2;
  bool groups_intersect = 3;
  NodeState state = 4;
}

message Node {
  string name = 1;
  NodeState state = 2;
  repeated int32 jobs = 3;
  repeated string groups = 4;
}

message GetNodesReply {
  repeated Node nodes = 1;
}

message GetJobsRequest {
  map<int32, bool> job_ids = 1;
}

enum JobState {
  Created      = 0;
  Dispatching  = 1;
  Running      = 2;
  Canceling    = 3;
  Finished     = 4;
  Failed       = 5;
  Canceled     = 6;
  CancelFailed = 7;
}

message Job {
  int32 id = 1;
  string command = 2;
  string sweep = 3;
  repeated string nodes = 4;
  int64 create_time = 5;
  int64 end_time = 6;
  JobState state = 7;
  map<string, int32> failed_nodes = 8;
  repeated string cancel_failed_nodes = 9;
  repeated string arguments = 10;
}

message GetJobsReply {
  repeated Job jobs = 1;
}

message GetOutputRequest {
  int32 job_id = 1;
  string node = 2;
}

message GetOutputReply {
  string node = 1;
  string stdout = 2;
  string stderr = 3;
}

message StartClusJobRequest {
  string command = 1;
  repeated string nodes = 2;
  string pattern = 3;
  repeated string groups = 4;
  bool groups_intersect = 5;
  string sweep = 6;
  repeated string arguments = 7;
}

message StartClusJobReply {
  int32 job_id = 1;
  repeated string nodes = 2;
  string node = 3;
  string stdout = 4;
  string stderr = 5;
  sint32 exit_code = 6;
}

message CancelClusJobsRequest {
  map<int32, bool> job_ids = 1;
}

message CancelClusJobsReply {
  map<int32, JobState> result = 1;
}

message StartJobRequest {
  string headnode = 1;
  int32 job_id = 2;
  string command = 3;
  repeated string arguments = 4;
}

message StartJobReply {
  string stdout = 1;
  string stderr = 2;
  sint32 exit_code = 3;
}

message CancelJobRequest {
  string headnode = 1;
  int32 job_id = 2;
  bool force = 3;
}

message ValidateRequest {
  string headnode = 1;
  string clusnode = 2;
}

message ValidateReply {
  string nodename = 1;
}

message SetNodeGroupsRequest {
  repeated string groups = 1;
  repeated Node nodes = 2;
  bool remove = 3;
}

enum SetHeadnodesMode {
  Default = 0;
  Add     = 1;
  Remove  = 2;
}

message SetHeadnodesRequest {
  repeated string headnodes = 1;
  SetHeadnodesMode mode = 2;
}

message SetHeadnodesReply {
  map<string, string> results = 1;
}

message SetConfigsRequest {
  map<string, string> configs = 1;
}

message SetConfigsReply {
  map<string, string> results = 1;
}

message GetConfigsReply {
  map<string, string> configs = 1;
}